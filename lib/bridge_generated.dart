// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class Rust {
  Future<void> tryInit({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTryInitConstMeta;

  Future<List<PartialTerm>> findSuggestions(
      {required String text, required int count, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFindSuggestionsConstMeta;

  Future<FullTerm> unwrapTerm({required PartialTerm term, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnwrapTermConstMeta;

  Future<int> get({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetConstMeta;

  Future<String> read({required String filePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadConstMeta;
}

class FullTerm {
  final String term;
  final List<UnwrappedData> data;

  FullTerm({
    required this.term,
    required this.data,
  });
}

@freezed
class PartialTerm with _$PartialTerm {
  const factory PartialTerm({
    required String term,
    required List<Reference> references,
  }) = _PartialTerm;
}

class PartialUnwrappedData {
  final List<String> words;
  final int index;

  PartialUnwrappedData({
    required this.words,
    required this.index,
  });
}

class Reference {
  final int index;
  final WordType wordType;

  Reference({
    required this.index,
    required this.wordType,
  });
}

class Relation {
  final PartialUnwrappedData relation;
  final RelationType relationType;
  final WordType wordType;

  Relation({
    required this.relation,
    required this.relationType,
    required this.wordType,
  });
}

enum RelationType {
  Antonym,
  MemberHolonym,
  PartHolonym,
  SubstanceHolonym,
  VerbGroup,
  MemberMeronym,
  PartMeronym,
  SubstanceMeronym,
  SimilarTo,
  Entailment,
  DerivationallyRelatedForm,
  MemberOfThisDomainTopic,
  MemberOfThisDomainRegion,
  MemberOfThisDomainUsage,
  DomainOfSynsetTopic,
  DomainOfSynsetRegion,
  DomainOfSynsetUsage,
  ParticipleOfVerb,
  Attribute,
  Cause,
  Hypernym,
  InstanceHypernym,
  DerivedFromAdjective,
  PertainsToNoun,
  AlsoSee,
  Hyponym,
  InstanceHyponym,
}

class UnwrappedData {
  final List<String> words;
  final List<Relation> relations;
  final String definition;
  final List<UseCase> useCases;
  final WordType wordType;

  UnwrappedData({
    required this.words,
    required this.relations,
    required this.definition,
    required this.useCases,
    required this.wordType,
  });
}

class UseCase {
  final int id;
  final int wordIndex;

  UseCase({
    required this.id,
    required this.wordIndex,
  });
}

enum WordType {
  Noun,
  Verb,
  Adjective,
  Satellite,
  Adverb,
}

class RustImpl extends FlutterRustBridgeBase<RustWire> implements Rust {
  factory RustImpl(ffi.DynamicLibrary dylib) => RustImpl.raw(RustWire(dylib));

  RustImpl.raw(RustWire inner) : super(inner);

  Future<void> tryInit({required String path, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_try_init(port_, _api2wire_String(path)),
        parseSuccessData: _wire2api_unit,
        constMeta: kTryInitConstMeta,
        argValues: [path],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTryInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "try_init",
        argNames: ["path"],
      );

  Future<List<PartialTerm>> findSuggestions(
          {required String text, required int count, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_find_suggestions(
            port_, _api2wire_String(text), _api2wire_u32(count)),
        parseSuccessData: _wire2api_list_partial_term,
        constMeta: kFindSuggestionsConstMeta,
        argValues: [text, count],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFindSuggestionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "find_suggestions",
        argNames: ["text", "count"],
      );

  Future<FullTerm> unwrapTerm({required PartialTerm term, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_unwrap_term(
            port_, _api2wire_box_autoadd_partial_term(term)),
        parseSuccessData: _wire2api_full_term,
        constMeta: kUnwrapTermConstMeta,
        argValues: [term],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUnwrapTermConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unwrap_term",
        argNames: ["term"],
      );

  Future<int> get({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kGetConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get",
        argNames: [],
      );

  Future<String> read({required String filePath, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_read(port_, _api2wire_String(filePath)),
        parseSuccessData: _wire2api_String,
        constMeta: kReadConstMeta,
        argValues: [filePath],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kReadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "read",
        argNames: ["filePath"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_PartialTerm> _api2wire_box_autoadd_partial_term(
      PartialTerm raw) {
    final ptr = inner.new_box_autoadd_partial_term_0();
    _api_fill_to_wire_partial_term(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  ffi.Pointer<wire_list_reference> _api2wire_list_reference(
      List<Reference> raw) {
    final ans = inner.new_list_reference_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_reference(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_word_type(WordType raw) {
    return _api2wire_i32(raw.index);
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_partial_term(
      PartialTerm apiObj, ffi.Pointer<wire_PartialTerm> wireObj) {
    _api_fill_to_wire_partial_term(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_partial_term(
      PartialTerm apiObj, wire_PartialTerm wireObj) {
    wireObj.term = _api2wire_String(apiObj.term);
    wireObj.references = _api2wire_list_reference(apiObj.references);
  }

  void _api_fill_to_wire_reference(Reference apiObj, wire_Reference wireObj) {
    wireObj.index = _api2wire_u64(apiObj.index);
    wireObj.word_type = _api2wire_word_type(apiObj.wordType);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<String> _wire2api_StringList(dynamic raw) {
  return (raw as List<dynamic>).cast<String>();
}

FullTerm _wire2api_full_term(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return FullTerm(
    term: _wire2api_String(arr[0]),
    data: _wire2api_list_unwrapped_data(arr[1]),
  );
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

List<PartialTerm> _wire2api_list_partial_term(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_partial_term).toList();
}

List<Reference> _wire2api_list_reference(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_reference).toList();
}

List<Relation> _wire2api_list_relation(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_relation).toList();
}

List<UnwrappedData> _wire2api_list_unwrapped_data(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_unwrapped_data).toList();
}

List<UseCase> _wire2api_list_use_case(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_use_case).toList();
}

PartialTerm _wire2api_partial_term(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PartialTerm(
    term: _wire2api_String(arr[0]),
    references: _wire2api_list_reference(arr[1]),
  );
}

PartialUnwrappedData _wire2api_partial_unwrapped_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PartialUnwrappedData(
    words: _wire2api_StringList(arr[0]),
    index: _wire2api_u64(arr[1]),
  );
}

Reference _wire2api_reference(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Reference(
    index: _wire2api_u64(arr[0]),
    wordType: _wire2api_word_type(arr[1]),
  );
}

Relation _wire2api_relation(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return Relation(
    relation: _wire2api_partial_unwrapped_data(arr[0]),
    relationType: _wire2api_relation_type(arr[1]),
    wordType: _wire2api_word_type(arr[2]),
  );
}

RelationType _wire2api_relation_type(dynamic raw) {
  return RelationType.values[raw];
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

UnwrappedData _wire2api_unwrapped_data(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 5)
    throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
  return UnwrappedData(
    words: _wire2api_StringList(arr[0]),
    relations: _wire2api_list_relation(arr[1]),
    definition: _wire2api_String(arr[2]),
    useCases: _wire2api_list_use_case(arr[3]),
    wordType: _wire2api_word_type(arr[4]),
  );
}

UseCase _wire2api_use_case(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return UseCase(
    id: _wire2api_u64(arr[0]),
    wordIndex: _wire2api_u64(arr[1]),
  );
}

WordType _wire2api_word_type(dynamic raw) {
  return WordType.values[raw];
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_try_init(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_try_init(
      port_,
      path,
    );
  }

  late final _wire_try_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_try_init');
  late final _wire_try_init = _wire_try_initPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_find_suggestions(
    int port_,
    ffi.Pointer<wire_uint_8_list> text,
    int count,
  ) {
    return _wire_find_suggestions(
      port_,
      text,
      count,
    );
  }

  late final _wire_find_suggestionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_find_suggestions');
  late final _wire_find_suggestions = _wire_find_suggestionsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_unwrap_term(
    int port_,
    ffi.Pointer<wire_PartialTerm> term,
  ) {
    return _wire_unwrap_term(
      port_,
      term,
    );
  }

  late final _wire_unwrap_termPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_PartialTerm>)>>('wire_unwrap_term');
  late final _wire_unwrap_term = _wire_unwrap_termPtr
      .asFunction<void Function(int, ffi.Pointer<wire_PartialTerm>)>();

  void wire_get(
    int port_,
  ) {
    return _wire_get(
      port_,
    );
  }

  late final _wire_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get');
  late final _wire_get = _wire_getPtr.asFunction<void Function(int)>();

  void wire_read(
    int port_,
    ffi.Pointer<wire_uint_8_list> file_path,
  ) {
    return _wire_read(
      port_,
      file_path,
    );
  }

  late final _wire_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_read');
  late final _wire_read = _wire_readPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_PartialTerm> new_box_autoadd_partial_term_0() {
    return _new_box_autoadd_partial_term_0();
  }

  late final _new_box_autoadd_partial_term_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PartialTerm> Function()>>(
          'new_box_autoadd_partial_term_0');
  late final _new_box_autoadd_partial_term_0 =
      _new_box_autoadd_partial_term_0Ptr
          .asFunction<ffi.Pointer<wire_PartialTerm> Function()>();

  ffi.Pointer<wire_list_reference> new_list_reference_0(
    int len,
  ) {
    return _new_list_reference_0(
      len,
    );
  }

  late final _new_list_reference_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_reference> Function(
              ffi.Int32)>>('new_list_reference_0');
  late final _new_list_reference_0 = _new_list_reference_0Ptr
      .asFunction<ffi.Pointer<wire_list_reference> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Reference extends ffi.Struct {
  @ffi.Uint64()
  external int index;

  @ffi.Int32()
  external int word_type;
}

class wire_list_reference extends ffi.Struct {
  external ffi.Pointer<wire_Reference> ptr;

  @ffi.Int32()
  external int len;
}

class wire_PartialTerm extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> term;

  external ffi.Pointer<wire_list_reference> references;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
